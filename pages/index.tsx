import { useState, useEffect, useRef } from "react";
import useSWR from "swr";
import Head from "next/head";
import Image from "next/image";
import { fetcher } from "/lib/fetcher";
import { HttpMethod } from "/types/http";

import type { FormEvent } from "react";

export default function Home() {
  const [task, setTask] = useState({ task: "" });
  const taskContentRef = useRef<HTMLInputElement | null>(null);
  const [inputTask, setInputTask] = useState("");
  const [isEditables, setIsEditables] = useState<Array<boolean>>([]);

  const handleChange = ({ currentTarget: input }) => {
    if (input.value !== "") {
      setInputTask(input.value);
    }
  };

  const { data: tasks, mutate } = useSWR("/api/task", fetcher);

  useEffect(() => {
    if (tasks) {
      const initEditables = new Array<boolean>(tasks.length).fill(false);
      setIsEditables(initEditables);
    }
  }, [tasks]);

  async function createTask(taskContent: string) {
    if (taskContent !== "") {
      const res = await fetch("/api/task", {
        method: HttpMethod.POST,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          task: taskContent,
        }),
      });
      if (res.ok) {
        mutate();
        setInputTask("");
      }
    }
  }

  async function updateTask(object) {
    const res = await fetch("/api/task", {
      method: HttpMethod.PUT,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        id: object.id,
        completed: object.completed,
      }),
    });
    if (res.ok) {
      const sleep = (msec) =>
        new Promise((resolve) => setTimeout(resolve, msec));
      await sleep(500);
      mutate();
    }
  }

  async function deleteTask(id: number) {
    const res = await fetch("/api/task", {
      method: HttpMethod.DELETE,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        id: id,
      }),
    });
    if (res.ok) {
      mutate();
    }
  }

  return (
    <div className={"text-gray-600 body-font"}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={"container px-5 py-24 mx-auto"}>
        <div className="flex flex-col text-center w-full mb-20">
          <h1
            className={
              "sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900"
            }
          >
            Sample TODO App
          </h1>
        </div>
        <div className={"lg:w-2/3 w-full mx-auto overflow-auto"}>
          <div className={"w-full mb-20"}>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                //setCreatingSite(true);
                createTask(taskContentRef.current?.value);
              }}
              className={
                "flex lg:w-2/3 w-full sm:flex-row flex-col mx-auto px-8 sm:space-x-4 sm:space-y-0 space-y-4 sm:px-0 items-end"
              }
            >
              <div className={"relative flex-grow w-full"}>
                <input
                  className={
                    "w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-transparent focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                  }
                  type="text"
                  placeholder="Create Task"
                  ref={taskContentRef}
                  onChange={handleChange}
                  value={inputTask}
                />
              </div>
              <button
                type="submit"
                className={
                  "text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg"
                }
              >
                Add
              </button>
            </form>
          </div>
          <table className={"table-auto w-full text-left whitespace-no-wrap"}>
            <thead>
              <tr>
                <th
                  className={
                    "px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100 rounded-tl rounded-bl"
                  }
                >
                  completed
                </th>
                <th
                  className={
                    "px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100"
                  }
                >
                  task
                </th>
                <th
                  className={
                    "px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100 rounded-tr rounded-br"
                  }
                >
                  edit/delete
                </th>
              </tr>
            </thead>
            <tbody>
              {tasks &&
                tasks.map((task, index) => (
                  <tr>
                    <td
                      className={"border-t-2 border-gray-200 px-4 py-3"}
                      key={task.id}
                    >
                      <input
                        type="checkbox"
                        className={""}
                        onChange={(e) =>
                          updateTask({
                            id: task.id,
                            completed: e.target.checked,
                          })
                        }
                      />
                    </td>
                    <td className={"border-t-2 border-gray-200 px-4 py-3"}>
                      {isEditables[index] === true ? (
                        <></>
                      ) : (
                        <p className={task.completed}>{task.task}</p>
                      )}
                    </td>
                    <td className={"border-t-2 border-gray-200 px-4 py-3"}>
                      <div className="flex">
                        <div className={"flex-auto"}>
                          <button
                            onClick={() => {
                              const hoge = isEditables;
                              hoge[index] = true;
                              setIsEditables(hoge);
                              console.log(isEditables[index] == true);
                            }}
                            className={""}
                          >
                            &#9998;
                          </button>
                        </div>
                        <div className={"flex-auto"}>
                          <button
                            onClick={() => deleteTask(task.id)}
                            className={""}
                          >
                            &#10006;
                          </button>
                        </div>
                      </div>
                    </td>
                  </tr>
                ))}
              {tasks && tasks.length === 0 && <h2 className={""}>No tasks</h2>}
            </tbody>
          </table>
        </div>
      </main>
    </div>
  );
}
